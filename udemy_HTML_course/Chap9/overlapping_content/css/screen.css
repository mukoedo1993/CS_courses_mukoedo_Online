html {
    background-color: #869960;
}

body {
    font-family: Tahoma, sans-serif;
    font-size: 85%;
}


.container{ 
    max-width: 940px;
    margin-left: auto;
    margin-right: auto;
    background-color: #FFF;/*white*/
    /*!40 px for columns padding look good.!*/
    
    padding-left: 40px;
    padding-right: 40px;
    
    box-sizing: border-box;/*Let the browser notice that you shouold use max width as actual box size here.*/
}

header {
    /*
    padding-top: 20px;
    padding-bottom: 20px;
    */
    color: #33cc33;
}

header h1 {
    margin: 0;
     /*remove its margin*/


    font-weight: normal;
    font-size:normal;
   
}

header p {
    margin: 0;
    /*remove its margin as well*/
}

.site-nav {
    margin-top: 20px;
}

.site-nav ul{
    margin: 0;
    padding: 0;
}

/* Site Navigation */
.site-nav li {
    list-style: none;
    float: left;
    margin-right: 5px;
    /*margin between each link 5 pixels.*/
}
/* End Site Navigation*/
.site-nav a{
    /*!
    We want to overwrite the default behavior,
    */
    display: block;/*We want the link to be block-level element.
    It can receive vertical padding, and the content around it
    will be aware of that padding.*/
    color: #617140;
    text-decoration: none;
    padding: 10px 20px;

    /*
    So while we are targeting the link elements we will add a property
...
    */


    border: 3px solid #e5e9dc;
    border-bottom: none;/*make two parts close to each other with zero distance.*/
}

.site-nav a:hover {/*pseudo selector.*/
    background-color: pink;
    /*So, when*/
}


.content-area {
    border-top: 3px solid #e5e9dc;
    border-bottom: 3px solid #e5e9dc;
}


.main-area {
    width: 66%;/*Only take 66% of the width*/
    float: left;/*tell the main area to float to the left*/
    padding-right: 40px;
    box-sizing: border-box;

}

img {
   max-width: 100%;
   height: auto;
}

.image-banner {
    z-index: 10;
    position: relative;
    left: 100px;
    /*10 pixels from the top where it is normally set.
    It can be incredibly useful. Because it allows us to
    manipulate the position of an element without removing it from
    the natural flow.
    */
/*
top: 60px;
bottom: -40px;
You could use offset here.
*/
}

.image-banner img {
    display:block;
}

.banner-description1 {
    position: relative;
    bottom: -8px;
  
}
/* Banner Overlay */
.banner-description{
  position: absolute;
  bottom: 0;
  left: 0;
  color: #FFF;
  background-color: rgba(0, 0, 0, .65);
  padding: 15px 25px;
  
  /*
  However, an element that uses position absolute will search up its
  family tree or up its Russian stacking doll model for the closest ancestor
  element that uses position relative. And once it finds that element it will use
  it as its frame of reference for these values.
  So, it tries to postion itself in relation to image banner.
  */
    bottom: 50px;
    left: 50px;
    color: red;
}


.sidebar{
    z-index: 11;
    /*11>10. So sidebar will be positioned at the top.*/
    position: relative;
    width: 34%;
    float: left;
    background-color: #e5e9dc;
    padding: 20px 40px 20px 40px;/*top right bottom left*/

    box-sizing: border-box;
    font-size: 85%;
   
}

footer {
    text-align: center;
    font-size: 85%;
    color: #999;/*lighter gray*/
    padding-bottom: 20px;
    padding-top: 20px;
}


.fix{
    clear: both;
}

.group:before,
.group:after {
    content: "";
    display: table;
}

.group:after {
    clear: both;
}

.group {
    zoom: 1;
}